package com.lhsystems.module.datageneratorancillary.service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.Test;

import static org.junit.Assert.assertTrue;

/**
 * Test FlightGenerator.
 *
 * @author REJ
 * @version $Revision: 1.10 $
 */
public class FlightGeneratorTest {

    /** The minimal date for testing. */
    private static final LocalDate MIN_DATE = LocalDate.of(2017, 4, 6);

    /** The maximal date for testing. */
    private static final LocalDate MAX_DATE = LocalDate.of(2018, 7, 9);

    /**
     * Instantiates a new flight generator test.
     */
    public FlightGeneratorTest() {
    }

    /**
     * Checks if a list of flights generated by a flightGenerator has unique Ids
     * and unique FlightNumbers. Additionaly checks if the dates lie between the specified dates and if the Airports are different.
     *
     * @param flights
     *            to be checked
     * @return true, if ids and flight numbers are unique, if the time of
     *         departure is in 2018 or 2019, and if the origin is not the
     *         departure
     */
    private boolean checkFlights(final List<Flight> flights){
        final Set<Long> usedIds = new HashSet<>();
        final Set<Integer> usedFlightNumbers = new HashSet<>();
        boolean result = true;
        for (final Flight flight : flights) {
            if (!usedIds.add(flight.getId())
                    || !usedFlightNumbers.add(flight.getFlightNumber())
                    || flight.getDepartureDate().compareTo(MIN_DATE) < 0
                    || flight.getDepartureDate().compareTo(MAX_DATE) > 0
                    || flight.getOriginAirport() == flight.getDestinationAirport()) {
                result = false;
            }
        }
        return result;
    }

    /**
     * Tests <code>FlightGenerator.generateFlights()</code> by generating 500
     * flights and checking if they suffice <code>checkFlights</code>.
     */
    @Test
    public final void testGenerateFlights() {
        final ArrayList<Airport> airports = new ArrayList<>();
        airports.add(new Airport("TAD","Test Airport Domestic", Market.DOMESTIC));
        airports.add(new Airport("TAC","Test Airport Continental", Market.CONTINENTAL));
        airports.add(new Airport("TAI","Test Airport Intercontinental", Market.INTERCONTINENTAL));

        final FlightGenerator flightGenerator = new FlightGenerator(
                10,
                airports,
                MIN_DATE,
                MAX_DATE);
        final List<Flight> flights = flightGenerator.generateFlights(500);
        assertTrue(checkFlights(flights));
    }
}

