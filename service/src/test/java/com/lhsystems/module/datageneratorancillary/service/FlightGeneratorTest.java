package com.lhsystems.module.datageneratorancillary.service;

import com.lhsystems.module.datageneratorancillary.service.generator.core.FlightGenerator;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.lhsystems.module.datageneratorancillary.service.data.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import static org.junit.Assert.assertTrue;

/**
 * Test <code>FlightGenerator</code>.
 *
 * @author REJ
 * @version $Revision: 1.10 $
 */
@RunWith(MockitoJUnitRunner.class)
public class FlightGeneratorTest {

    /** The minimal date for testing. */
    private static final LocalDate MIN_DATE = LocalDate.of(2017, 4, 6);

    /** The maximal date for testing. */
    private static final LocalDate MAX_DATE = LocalDate.of(2018, 7, 9);

    /** some tariff. */
    private Tariff tariff;

    /**
     * Instantiates a new flight generator test.
     */
    public FlightGeneratorTest() {
    }

    /**
     * sets up the tests.
     */
    @Before
    public void setUp(){
        final BaggageSize baggageSize = new BaggageSize(3, 3, 3, 3);
        final BaggageLimits baggageLimits = new BaggageLimits(1, baggageSize, 3, 3);
        final BaggagePricing baggagePricing = new BaggagePricing(1, 3, 3, 3);
        final BaggageClass baggageClass = new BaggageClass(
                1,
                "baggageClass",
                baggageLimits,
                baggagePricing);
        final Compartment compartment = new Compartment(1, 'N', "name");
        final List<BaggageClass> baggageClasses = new ArrayList<>();
        baggageClasses.add(baggageClass);
        final Map<BaggageClass, Integer> includedBags = new HashMap<>();
        includedBags.put(baggageClass, 1);
        final Product product = new Product(
                1,
                "product",
                compartment,
                baggageClasses,
                includedBags);
        final SeatGroup seatGroup = new SeatGroup(1, "seatGroup", 1, 1);
        final ArrayList<SeatGroup> seatGroups = new ArrayList<>();
        seatGroups.add(seatGroup);
        final SeatingModel seatingModel = new SeatingModel(1, seatGroups);
        tariff = new Tariff(1, 3, seatingModel, product, Market.CONTINENTAL);    }

    /**
     * Checks if a list of flights generated by a <code>flightGenerator</code>
     * has unique Ids and unique FlightNumbers. Additionaly checks if the dates
     * lie between the specified dates and if the Airports are different.
     *
     * @param flights
     *            to be checked
     * @return true, if ids and flight numbers are unique, if the time of
     *         departure is in 2018 or 2019, and if the origin is not the
     *         departure
     */
    private boolean checkFlights(final List<Flight> flights){
        final Set<Long> usedIds = new HashSet<>();
        final Set<Integer> usedFlightNumbers = new HashSet<>();
        boolean result = true;
        for (final Flight flight : flights) {
            if (!usedIds.add(flight.getId())
                    || !usedFlightNumbers.add(flight.getFlightNumber())
                    || flight.getDepartureDate().compareTo(MIN_DATE) < 0
                    || flight.getDepartureDate().compareTo(MAX_DATE) > 0
                    || flight.getRoute().getOriginAirport() == flight.getRoute().getDestinationAirport()) {
                result = false;
            }
        }
        return result;
    }

    /**
     * Tests <code>FlightGenerator.generateFlights()</code> by generating a
     * number of flights and checking if they suffice <code>checkFlights</code>.
     */
    @Test
    public final void testGenerateFlights() {
        final List<Airport> airports = new ArrayList<>();
        final List<Tariff> tariffs = new ArrayList<>();
        tariffs.add(tariff);
        airports.add(new Airport("TAD","Test Airport Domestic", Market.DOMESTIC));
        airports.add(new Airport("TDO", "Test Airport Domestic2", Market.DOMESTIC));
        airports.add(new Airport("TAC","Test Airport Continental", Market.CONTINENTAL));
        airports.add(new Airport("TAI","Test Airport Intercontinental", Market.INTERCONTINENTAL));
        List<Route> routes = new ArrayList<>();
        routes.add(new Route(airports.get(0), airports.get(1)));
        routes.add(new Route(airports.get(2), airports.get(1)));
        routes.add(new Route(airports.get(1), airports.get(2)));

        final FlightGenerator flightGenerator = new FlightGenerator(
                (long) 10,
                routes,
                tariffs,
                MIN_DATE,
                MAX_DATE);
        final List<Flight> flights = flightGenerator.generateList(
                500);
        assertTrue(checkFlights(flights));
    }
}